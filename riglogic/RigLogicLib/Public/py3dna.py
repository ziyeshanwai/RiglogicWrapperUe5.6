# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _py3dna
else:
    import _py3dna

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def __new_decorator(factory_func, original_new):
    @staticmethod
    def __new(cls, *args, **kwargs):
# FIXME: while this workaround solves the immediate issue with the set of classes we currently have,
# it will fail for classes that use a factory function but need no parameters at all, in which case
# the factory function will never be invoked, only the original __new__ function.
        if args or kwargs:
            return factory_func(*args, **kwargs)
        return original_new(cls)
    return __new

def __managed_init(self, *args, **kwargs):
    self._args = args
    self._kwargs = kwargs

class MemoryResource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py3dna.delete_MemoryResource

    def allocate(self, size, alignment):
        return _py3dna.MemoryResource_allocate(self, size, alignment)

    def deallocate(self, ptr, size, alignment):
        return _py3dna.MemoryResource_deallocate(self, ptr, size, alignment)

# Register MemoryResource in _py3dna:
_py3dna.MemoryResource_swigregister(MemoryResource)
class AlignedMemoryResource(MemoryResource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def allocate(self, size, alignment):
        return _py3dna.AlignedMemoryResource_allocate(self, size, alignment)

    def deallocate(self, ptr, size, alignment):
        return _py3dna.AlignedMemoryResource_deallocate(self, ptr, size, alignment)

    def __init__(self):
        _py3dna.AlignedMemoryResource_swiginit(self, _py3dna.new_AlignedMemoryResource())
    __swig_destroy__ = _py3dna.delete_AlignedMemoryResource

# Register AlignedMemoryResource in _py3dna:
_py3dna.AlignedMemoryResource_swigregister(AlignedMemoryResource)
class ArenaMemoryResource(MemoryResource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _py3dna.delete_ArenaMemoryResource

    def __init__(self, *args):
        _py3dna.ArenaMemoryResource_swiginit(self, _py3dna.new_ArenaMemoryResource(*args))

    def allocate(self, size, alignment):
        return _py3dna.ArenaMemoryResource_allocate(self, size, alignment)

    def deallocate(self, ptr, size, alignment):
        return _py3dna.ArenaMemoryResource_deallocate(self, ptr, size, alignment)

    def getUpstreamMemoryResource(self):
        return _py3dna.ArenaMemoryResource_getUpstreamMemoryResource(self)

# Register ArenaMemoryResource in _py3dna:
_py3dna.ArenaMemoryResource_swigregister(ArenaMemoryResource)
class DefaultMemoryResource(MemoryResource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def allocate(self, size, alignment):
        return _py3dna.DefaultMemoryResource_allocate(self, size, alignment)

    def deallocate(self, ptr, size, alignment):
        return _py3dna.DefaultMemoryResource_deallocate(self, ptr, size, alignment)

    def __init__(self):
        _py3dna.DefaultMemoryResource_swiginit(self, _py3dna.new_DefaultMemoryResource())
    __swig_destroy__ = _py3dna.delete_DefaultMemoryResource

# Register DefaultMemoryResource in _py3dna:
_py3dna.DefaultMemoryResource_swigregister(DefaultMemoryResource)
class StatusCode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    code = property(_py3dna.StatusCode_code_get, _py3dna.StatusCode_code_set)
    message = property(_py3dna.StatusCode_message_get, _py3dna.StatusCode_message_set)

    def __init__(self):
        _py3dna.StatusCode_swiginit(self, _py3dna.new_StatusCode())
    __swig_destroy__ = _py3dna.delete_StatusCode

# Register StatusCode in _py3dna:
_py3dna.StatusCode_swigregister(StatusCode)
class Status(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def isOk():
        return _py3dna.Status_isOk()

    @staticmethod
    def get():
        return _py3dna.Status_get()

    @staticmethod
    def getHook():
        return _py3dna.Status_getHook()

    @staticmethod
    def setHook(hook):
        return _py3dna.Status_setHook(hook)

    def __init__(self):
        _py3dna.Status_swiginit(self, _py3dna.new_Status())
    __swig_destroy__ = _py3dna.delete_Status

# Register Status in _py3dna:
_py3dna.Status_swigregister(Status)
class Readable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def read(self, *args):
        return _py3dna.Readable_read(self, *args)

# Register Readable in _py3dna:
_py3dna.Readable_swigregister(Readable)
class Writable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def write(self, *args):
        return _py3dna.Writable_write(self, *args)

# Register Writable in _py3dna:
_py3dna.Writable_swigregister(Writable)
class Seekable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def tell(self):
        return _py3dna.Seekable_tell(self)

    def seek(self, position):
        return _py3dna.Seekable_seek(self, position)

# Register Seekable in _py3dna:
_py3dna.Seekable_swigregister(Seekable)
class Openable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def open(self):
        return _py3dna.Openable_open(self)

# Register Openable in _py3dna:
_py3dna.Openable_swigregister(Openable)
class Closeable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def close(self):
        return _py3dna.Closeable_close(self)

# Register Closeable in _py3dna:
_py3dna.Closeable_swigregister(Closeable)
class Controllable(Openable, Closeable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register Controllable in _py3dna:
_py3dna.Controllable_swigregister(Controllable)
class Bounded(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def size(self):
        return _py3dna.Bounded_size(self)

# Register Bounded in _py3dna:
_py3dna.Bounded_swigregister(Bounded)
class Buffered(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def flush(self):
        return _py3dna.Buffered_flush(self)

# Register Buffered in _py3dna:
_py3dna.Buffered_swigregister(Buffered)
class Resizable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def resize(self, size):
        return _py3dna.Resizable_resize(self, size)

# Register Resizable in _py3dna:
_py3dna.Resizable_swigregister(Resizable)
class BoundedIOStream(Controllable, Readable, Writable, Seekable, Bounded):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py3dna.delete_BoundedIOStream

# Register BoundedIOStream in _py3dna:
_py3dna.BoundedIOStream_swigregister(BoundedIOStream)
cvar = _py3dna.cvar
BoundedIOStream.OpenError = _py3dna.cvar.BoundedIOStream_OpenError
BoundedIOStream.ReadError = _py3dna.cvar.BoundedIOStream_ReadError
BoundedIOStream.WriteError = _py3dna.cvar.BoundedIOStream_WriteError
BoundedIOStream.AlreadyOpenError = _py3dna.cvar.BoundedIOStream_AlreadyOpenError
BoundedIOStream.SeekError = _py3dna.cvar.BoundedIOStream_SeekError

AccessMode_Read = _py3dna.AccessMode_Read
AccessMode_Write = _py3dna.AccessMode_Write
AccessMode_ReadWrite = _py3dna.AccessMode_ReadWrite
OpenMode_Binary = _py3dna.OpenMode_Binary
OpenMode_Text = _py3dna.OpenMode_Text
class FileStream(BoundedIOStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def create(path, accessMode, openMode, memRes=None):
        return _py3dna.FileStream_create(path, accessMode, openMode, memRes)

    @staticmethod
    def destroy(instance):
        return _py3dna.FileStream_destroy(instance)
    __swig_destroy__ = _py3dna.delete_FileStream

# Register FileStream in _py3dna:
_py3dna.FileStream_swigregister(FileStream)
class MemoryMappedFileStream(BoundedIOStream, Buffered, Resizable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def create(path, accessMode, memRes=None):
        return _py3dna.MemoryMappedFileStream_create(path, accessMode, memRes)

    @staticmethod
    def destroy(instance):
        return _py3dna.MemoryMappedFileStream_destroy(instance)
    __swig_destroy__ = _py3dna.delete_MemoryMappedFileStream

# Register MemoryMappedFileStream in _py3dna:
_py3dna.MemoryMappedFileStream_swigregister(MemoryMappedFileStream)
class MemoryStream(BoundedIOStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def create(*args):
        return _py3dna.MemoryStream_create(*args)

    @staticmethod
    def destroy(instance):
        return _py3dna.MemoryStream_destroy(instance)
    __swig_destroy__ = _py3dna.delete_MemoryStream

# Register MemoryStream in _py3dna:
_py3dna.MemoryStream_swigregister(MemoryStream)

try:
    FileStream.AccessMode_Read = AccessMode_Read
    FileStream.AccessMode_Write = AccessMode_Write
    FileStream.AccessMode_ReadWrite = AccessMode_ReadWrite

    FileStream.OpenMode_Binary = OpenMode_Binary
    FileStream.OpenMode_Text = OpenMode_Text

    MemoryMappedFileStream.AccessMode_Read = AccessMode_Read
    MemoryMappedFileStream.AccessMode_Write = AccessMode_Write
    MemoryMappedFileStream.AccessMode_ReadWrite = AccessMode_ReadWrite
except:
# Fallback for compatibility
    FileStream.AccessMode_Read = 0
    FileStream.AccessMode_Write = 1
    FileStream.AccessMode_ReadWrite = 2

    FileStream.OpenMode_Binary = 0
    FileStream.OpenMode_Text = 1

    MemoryMappedFileStream.AccessMode_Read = 0
    MemoryMappedFileStream.AccessMode_Write = 1
    MemoryMappedFileStream.AccessMode_ReadWrite = 2

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py3dna.delete_SwigPyIterator

    def value(self):
        return _py3dna.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _py3dna.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _py3dna.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _py3dna.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _py3dna.SwigPyIterator_equal(self, x)

    def copy(self):
        return _py3dna.SwigPyIterator_copy(self)

    def next(self):
        return _py3dna.SwigPyIterator_next(self)

    def __next__(self):
        return _py3dna.SwigPyIterator___next__(self)

    def previous(self):
        return _py3dna.SwigPyIterator_previous(self)

    def advance(self, n):
        return _py3dna.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _py3dna.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _py3dna.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _py3dna.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _py3dna.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _py3dna.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _py3dna.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _py3dna:
_py3dna.SwigPyIterator_swigregister(SwigPyIterator)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _py3dna.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py3dna.StringVector___nonzero__(self)

    def __bool__(self):
        return _py3dna.StringVector___bool__(self)

    def __len__(self):
        return _py3dna.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _py3dna.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py3dna.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py3dna.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py3dna.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py3dna.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py3dna.StringVector___setitem__(self, *args)

    def pop(self):
        return _py3dna.StringVector_pop(self)

    def append(self, x):
        return _py3dna.StringVector_append(self, x)

    def empty(self):
        return _py3dna.StringVector_empty(self)

    def size(self):
        return _py3dna.StringVector_size(self)

    def swap(self, v):
        return _py3dna.StringVector_swap(self, v)

    def begin(self):
        return _py3dna.StringVector_begin(self)

    def end(self):
        return _py3dna.StringVector_end(self)

    def rbegin(self):
        return _py3dna.StringVector_rbegin(self)

    def rend(self):
        return _py3dna.StringVector_rend(self)

    def clear(self):
        return _py3dna.StringVector_clear(self)

    def get_allocator(self):
        return _py3dna.StringVector_get_allocator(self)

    def pop_back(self):
        return _py3dna.StringVector_pop_back(self)

    def erase(self, *args):
        return _py3dna.StringVector_erase(self, *args)

    def __init__(self, *args):
        _py3dna.StringVector_swiginit(self, _py3dna.new_StringVector(*args))

    def push_back(self, x):
        return _py3dna.StringVector_push_back(self, x)

    def front(self):
        return _py3dna.StringVector_front(self)

    def back(self):
        return _py3dna.StringVector_back(self)

    def assign(self, n, x):
        return _py3dna.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _py3dna.StringVector_resize(self, *args)

    def insert(self, *args):
        return _py3dna.StringVector_insert(self, *args)

    def reserve(self, n):
        return _py3dna.StringVector_reserve(self, n)

    def capacity(self):
        return _py3dna.StringVector_capacity(self)
    __swig_destroy__ = _py3dna.delete_StringVector

# Register StringVector in _py3dna:
_py3dna.StringVector_swigregister(StringVector)
class StringView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def c_str(self):
        return _py3dna.StringView_c_str(self)

    def __ref__(self):
        return _py3dna.StringView___ref__(self)

    def __init__(self):
        _py3dna.StringView_swiginit(self, _py3dna.new_StringView())
    __swig_destroy__ = _py3dna.delete_StringView

# Register StringView in _py3dna:
_py3dna.StringView_swigregister(StringView)

def __add__(*args):
    return _py3dna.__add__(*args)

def __sub__(*args):
    return _py3dna.__sub__(*args)

def __mul__(*args):
    return _py3dna.__mul__(*args)

def __truediv__(*args):
    return _py3dna.__truediv__(*args)

def __eq__(lhs, rhs):
    return _py3dna.__eq__(lhs, rhs)

def __ne__(lhs, rhs):
    return _py3dna.__ne__(lhs, rhs)
DataLayer_Descriptor = _py3dna.DataLayer_Descriptor
DataLayer_Definition = _py3dna.DataLayer_Definition
DataLayer_Behavior = _py3dna.DataLayer_Behavior
DataLayer_Geometry = _py3dna.DataLayer_Geometry
DataLayer_GeometryWithoutBlendShapes = _py3dna.DataLayer_GeometryWithoutBlendShapes
DataLayer_MachineLearnedBehavior = _py3dna.DataLayer_MachineLearnedBehavior
DataLayer_RBFBehavior = _py3dna.DataLayer_RBFBehavior
DataLayer_JointBehaviorMetadata = _py3dna.DataLayer_JointBehaviorMetadata
DataLayer_TwistSwingBehavior = _py3dna.DataLayer_TwistSwingBehavior
DataLayer_All = _py3dna.DataLayer_All

def __or__(lhs, rhs):
    return _py3dna.__or__(lhs, rhs)
UnknownLayerPolicy_Preserve = _py3dna.UnknownLayerPolicy_Preserve
UnknownLayerPolicy_Ignore = _py3dna.UnknownLayerPolicy_Ignore
Archetype_asian = _py3dna.Archetype_asian
Archetype_black = _py3dna.Archetype_black
Archetype_caucasian = _py3dna.Archetype_caucasian
Archetype_hispanic = _py3dna.Archetype_hispanic
Archetype_alien = _py3dna.Archetype_alien
Archetype_other = _py3dna.Archetype_other
Gender_male = _py3dna.Gender_male
Gender_female = _py3dna.Gender_female
Gender_other = _py3dna.Gender_other
TranslationUnit_cm = _py3dna.TranslationUnit_cm
TranslationUnit_m = _py3dna.TranslationUnit_m
RotationUnit_degrees = _py3dna.RotationUnit_degrees
RotationUnit_radians = _py3dna.RotationUnit_radians
Direction_left = _py3dna.Direction_left
Direction_right = _py3dna.Direction_right
Direction_up = _py3dna.Direction_up
Direction_down = _py3dna.Direction_down
Direction_front = _py3dna.Direction_front
Direction_back = _py3dna.Direction_back
class CoordinateSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    xAxis = property(_py3dna.CoordinateSystem_xAxis_get, _py3dna.CoordinateSystem_xAxis_set)
    yAxis = property(_py3dna.CoordinateSystem_yAxis_get, _py3dna.CoordinateSystem_yAxis_set)
    zAxis = property(_py3dna.CoordinateSystem_zAxis_get, _py3dna.CoordinateSystem_zAxis_set)

    def __init__(self):
        _py3dna.CoordinateSystem_swiginit(self, _py3dna.new_CoordinateSystem())
    __swig_destroy__ = _py3dna.delete_CoordinateSystem

# Register CoordinateSystem in _py3dna:
_py3dna.CoordinateSystem_swigregister(CoordinateSystem)
class DescriptorReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getName(self):
        return _py3dna.DescriptorReader_getName(self)

    def getArchetype(self):
        return _py3dna.DescriptorReader_getArchetype(self)

    def getGender(self):
        return _py3dna.DescriptorReader_getGender(self)

    def getAge(self):
        return _py3dna.DescriptorReader_getAge(self)

    def getMetaDataCount(self):
        return _py3dna.DescriptorReader_getMetaDataCount(self)

    def getMetaDataKey(self, index):
        return _py3dna.DescriptorReader_getMetaDataKey(self, index)

    def getMetaDataValue(self, key):
        return _py3dna.DescriptorReader_getMetaDataValue(self, key)

    def getTranslationUnit(self):
        return _py3dna.DescriptorReader_getTranslationUnit(self)

    def getRotationUnit(self):
        return _py3dna.DescriptorReader_getRotationUnit(self)

    def getCoordinateSystem(self):
        return _py3dna.DescriptorReader_getCoordinateSystem(self)

    def getLODCount(self):
        return _py3dna.DescriptorReader_getLODCount(self)

    def getDBMaxLOD(self):
        return _py3dna.DescriptorReader_getDBMaxLOD(self)

    def getDBComplexity(self):
        return _py3dna.DescriptorReader_getDBComplexity(self)

    def getDBName(self):
        return _py3dna.DescriptorReader_getDBName(self)

# Register DescriptorReader in _py3dna:
_py3dna.DescriptorReader_swigregister(DescriptorReader)
class MeshBlendShapeChannelMapping(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    meshIndex = property(_py3dna.MeshBlendShapeChannelMapping_meshIndex_get, _py3dna.MeshBlendShapeChannelMapping_meshIndex_set)
    blendShapeChannelIndex = property(_py3dna.MeshBlendShapeChannelMapping_blendShapeChannelIndex_get, _py3dna.MeshBlendShapeChannelMapping_blendShapeChannelIndex_set)

    def __init__(self):
        _py3dna.MeshBlendShapeChannelMapping_swiginit(self, _py3dna.new_MeshBlendShapeChannelMapping())
    __swig_destroy__ = _py3dna.delete_MeshBlendShapeChannelMapping

# Register MeshBlendShapeChannelMapping in _py3dna:
_py3dna.MeshBlendShapeChannelMapping_swigregister(MeshBlendShapeChannelMapping)
class DefinitionReader(DescriptorReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getGUIControlCount(self):
        return _py3dna.DefinitionReader_getGUIControlCount(self)

    def getGUIControlName(self, index):
        return _py3dna.DefinitionReader_getGUIControlName(self, index)

    def getRawControlCount(self):
        return _py3dna.DefinitionReader_getRawControlCount(self)

    def getRawControlName(self, index):
        return _py3dna.DefinitionReader_getRawControlName(self, index)

    def getJointCount(self):
        return _py3dna.DefinitionReader_getJointCount(self)

    def getJointName(self, index):
        return _py3dna.DefinitionReader_getJointName(self, index)

    def getJointIndexListCount(self):
        return _py3dna.DefinitionReader_getJointIndexListCount(self)

    def getJointIndicesForLOD(self, lod):
        return _py3dna.DefinitionReader_getJointIndicesForLOD(self, lod)

    def getJointParentIndex(self, index):
        return _py3dna.DefinitionReader_getJointParentIndex(self, index)

    def getBlendShapeChannelCount(self):
        return _py3dna.DefinitionReader_getBlendShapeChannelCount(self)

    def getBlendShapeChannelName(self, index):
        return _py3dna.DefinitionReader_getBlendShapeChannelName(self, index)

    def getBlendShapeChannelIndexListCount(self):
        return _py3dna.DefinitionReader_getBlendShapeChannelIndexListCount(self)

    def getBlendShapeChannelIndicesForLOD(self, lod):
        return _py3dna.DefinitionReader_getBlendShapeChannelIndicesForLOD(self, lod)

    def getAnimatedMapCount(self):
        return _py3dna.DefinitionReader_getAnimatedMapCount(self)

    def getAnimatedMapName(self, index):
        return _py3dna.DefinitionReader_getAnimatedMapName(self, index)

    def getAnimatedMapIndexListCount(self):
        return _py3dna.DefinitionReader_getAnimatedMapIndexListCount(self)

    def getAnimatedMapIndicesForLOD(self, lod):
        return _py3dna.DefinitionReader_getAnimatedMapIndicesForLOD(self, lod)

    def getMeshCount(self):
        return _py3dna.DefinitionReader_getMeshCount(self)

    def getMeshName(self, index):
        return _py3dna.DefinitionReader_getMeshName(self, index)

    def getMeshIndexListCount(self):
        return _py3dna.DefinitionReader_getMeshIndexListCount(self)

    def getMeshIndicesForLOD(self, lod):
        return _py3dna.DefinitionReader_getMeshIndicesForLOD(self, lod)

    def getMeshBlendShapeChannelMappingCount(self):
        return _py3dna.DefinitionReader_getMeshBlendShapeChannelMappingCount(self)

    def getMeshBlendShapeChannelMapping(self, index):
        return _py3dna.DefinitionReader_getMeshBlendShapeChannelMapping(self, index)

    def getMeshBlendShapeChannelMappingIndicesForLOD(self, lod):
        return _py3dna.DefinitionReader_getMeshBlendShapeChannelMappingIndicesForLOD(self, lod)

    def getNeutralJointTranslation(self, index):
        return _py3dna.DefinitionReader_getNeutralJointTranslation(self, index)

    def getNeutralJointTranslationXs(self):
        return _py3dna.DefinitionReader_getNeutralJointTranslationXs(self)

    def getNeutralJointTranslationYs(self):
        return _py3dna.DefinitionReader_getNeutralJointTranslationYs(self)

    def getNeutralJointTranslationZs(self):
        return _py3dna.DefinitionReader_getNeutralJointTranslationZs(self)

    def getNeutralJointRotation(self, index):
        return _py3dna.DefinitionReader_getNeutralJointRotation(self, index)

    def getNeutralJointRotationXs(self):
        return _py3dna.DefinitionReader_getNeutralJointRotationXs(self)

    def getNeutralJointRotationYs(self):
        return _py3dna.DefinitionReader_getNeutralJointRotationYs(self)

    def getNeutralJointRotationZs(self):
        return _py3dna.DefinitionReader_getNeutralJointRotationZs(self)

# Register DefinitionReader in _py3dna:
_py3dna.DefinitionReader_swigregister(DefinitionReader)
class BehaviorReader(DefinitionReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getGUIToRawInputIndices(self):
        return _py3dna.BehaviorReader_getGUIToRawInputIndices(self)

    def getGUIToRawOutputIndices(self):
        return _py3dna.BehaviorReader_getGUIToRawOutputIndices(self)

    def getGUIToRawFromValues(self):
        return _py3dna.BehaviorReader_getGUIToRawFromValues(self)

    def getGUIToRawToValues(self):
        return _py3dna.BehaviorReader_getGUIToRawToValues(self)

    def getGUIToRawSlopeValues(self):
        return _py3dna.BehaviorReader_getGUIToRawSlopeValues(self)

    def getGUIToRawCutValues(self):
        return _py3dna.BehaviorReader_getGUIToRawCutValues(self)

    def getPSDCount(self):
        return _py3dna.BehaviorReader_getPSDCount(self)

    def getPSDRowIndices(self):
        return _py3dna.BehaviorReader_getPSDRowIndices(self)

    def getPSDColumnIndices(self):
        return _py3dna.BehaviorReader_getPSDColumnIndices(self)

    def getPSDValues(self):
        return _py3dna.BehaviorReader_getPSDValues(self)

    def getJointRowCount(self):
        return _py3dna.BehaviorReader_getJointRowCount(self)

    def getJointColumnCount(self):
        return _py3dna.BehaviorReader_getJointColumnCount(self)

    def getJointVariableAttributeIndices(self, lod):
        return _py3dna.BehaviorReader_getJointVariableAttributeIndices(self, lod)

    def getJointGroupCount(self):
        return _py3dna.BehaviorReader_getJointGroupCount(self)

    def getJointGroupLODs(self, jointGroupIndex):
        return _py3dna.BehaviorReader_getJointGroupLODs(self, jointGroupIndex)

    def getJointGroupInputIndices(self, jointGroupIndex):
        return _py3dna.BehaviorReader_getJointGroupInputIndices(self, jointGroupIndex)

    def getJointGroupOutputIndices(self, jointGroupIndex):
        return _py3dna.BehaviorReader_getJointGroupOutputIndices(self, jointGroupIndex)

    def getJointGroupValues(self, jointGroupIndex):
        return _py3dna.BehaviorReader_getJointGroupValues(self, jointGroupIndex)

    def getJointGroupJointIndices(self, jointGroupIndex):
        return _py3dna.BehaviorReader_getJointGroupJointIndices(self, jointGroupIndex)

    def getBlendShapeChannelLODs(self):
        return _py3dna.BehaviorReader_getBlendShapeChannelLODs(self)

    def getBlendShapeChannelInputIndices(self):
        return _py3dna.BehaviorReader_getBlendShapeChannelInputIndices(self)

    def getBlendShapeChannelOutputIndices(self):
        return _py3dna.BehaviorReader_getBlendShapeChannelOutputIndices(self)

    def getAnimatedMapLODs(self):
        return _py3dna.BehaviorReader_getAnimatedMapLODs(self)

    def getAnimatedMapInputIndices(self):
        return _py3dna.BehaviorReader_getAnimatedMapInputIndices(self)

    def getAnimatedMapOutputIndices(self):
        return _py3dna.BehaviorReader_getAnimatedMapOutputIndices(self)

    def getAnimatedMapFromValues(self):
        return _py3dna.BehaviorReader_getAnimatedMapFromValues(self)

    def getAnimatedMapToValues(self):
        return _py3dna.BehaviorReader_getAnimatedMapToValues(self)

    def getAnimatedMapSlopeValues(self):
        return _py3dna.BehaviorReader_getAnimatedMapSlopeValues(self)

    def getAnimatedMapCutValues(self):
        return _py3dna.BehaviorReader_getAnimatedMapCutValues(self)

# Register BehaviorReader in _py3dna:
_py3dna.BehaviorReader_swigregister(BehaviorReader)
class GeometryReader(DefinitionReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getVertexPositionCount(self, meshIndex):
        return _py3dna.GeometryReader_getVertexPositionCount(self, meshIndex)

    def getVertexPosition(self, meshIndex, vertexIndex):
        return _py3dna.GeometryReader_getVertexPosition(self, meshIndex, vertexIndex)

    def getVertexPositionXs(self, meshIndex):
        return _py3dna.GeometryReader_getVertexPositionXs(self, meshIndex)

    def getVertexPositionYs(self, meshIndex):
        return _py3dna.GeometryReader_getVertexPositionYs(self, meshIndex)

    def getVertexPositionZs(self, meshIndex):
        return _py3dna.GeometryReader_getVertexPositionZs(self, meshIndex)

    def getVertexTextureCoordinateCount(self, meshIndex):
        return _py3dna.GeometryReader_getVertexTextureCoordinateCount(self, meshIndex)

    def getVertexTextureCoordinate(self, meshIndex, textureCoordinateIndex):
        return _py3dna.GeometryReader_getVertexTextureCoordinate(self, meshIndex, textureCoordinateIndex)

    def getVertexTextureCoordinateUs(self, meshIndex):
        return _py3dna.GeometryReader_getVertexTextureCoordinateUs(self, meshIndex)

    def getVertexTextureCoordinateVs(self, meshIndex):
        return _py3dna.GeometryReader_getVertexTextureCoordinateVs(self, meshIndex)

    def getVertexNormalCount(self, meshIndex):
        return _py3dna.GeometryReader_getVertexNormalCount(self, meshIndex)

    def getVertexNormal(self, meshIndex, normalIndex):
        return _py3dna.GeometryReader_getVertexNormal(self, meshIndex, normalIndex)

    def getVertexNormalXs(self, meshIndex):
        return _py3dna.GeometryReader_getVertexNormalXs(self, meshIndex)

    def getVertexNormalYs(self, meshIndex):
        return _py3dna.GeometryReader_getVertexNormalYs(self, meshIndex)

    def getVertexNormalZs(self, meshIndex):
        return _py3dna.GeometryReader_getVertexNormalZs(self, meshIndex)

    def getVertexLayoutCount(self, meshIndex):
        return _py3dna.GeometryReader_getVertexLayoutCount(self, meshIndex)

    def getVertexLayout(self, meshIndex, layoutIndex):
        return _py3dna.GeometryReader_getVertexLayout(self, meshIndex, layoutIndex)

    def getVertexLayoutPositionIndices(self, meshIndex):
        return _py3dna.GeometryReader_getVertexLayoutPositionIndices(self, meshIndex)

    def getVertexLayoutTextureCoordinateIndices(self, meshIndex):
        return _py3dna.GeometryReader_getVertexLayoutTextureCoordinateIndices(self, meshIndex)

    def getVertexLayoutNormalIndices(self, meshIndex):
        return _py3dna.GeometryReader_getVertexLayoutNormalIndices(self, meshIndex)

    def getFaceCount(self, meshIndex):
        return _py3dna.GeometryReader_getFaceCount(self, meshIndex)

    def getFaceVertexLayoutIndices(self, meshIndex, faceIndex):
        return _py3dna.GeometryReader_getFaceVertexLayoutIndices(self, meshIndex, faceIndex)

    def getMaximumInfluencePerVertex(self, meshIndex):
        return _py3dna.GeometryReader_getMaximumInfluencePerVertex(self, meshIndex)

    def getSkinWeightsCount(self, meshIndex):
        return _py3dna.GeometryReader_getSkinWeightsCount(self, meshIndex)

    def getSkinWeightsValues(self, meshIndex, vertexIndex):
        return _py3dna.GeometryReader_getSkinWeightsValues(self, meshIndex, vertexIndex)

    def getSkinWeightsJointIndices(self, meshIndex, vertexIndex):
        return _py3dna.GeometryReader_getSkinWeightsJointIndices(self, meshIndex, vertexIndex)

    def getBlendShapeTargetCount(self, meshIndex):
        return _py3dna.GeometryReader_getBlendShapeTargetCount(self, meshIndex)

    def getBlendShapeChannelIndex(self, meshIndex, blendShapeTargetIndex):
        return _py3dna.GeometryReader_getBlendShapeChannelIndex(self, meshIndex, blendShapeTargetIndex)

    def getBlendShapeTargetDeltaCount(self, meshIndex, blendShapeTargetIndex):
        return _py3dna.GeometryReader_getBlendShapeTargetDeltaCount(self, meshIndex, blendShapeTargetIndex)

    def getBlendShapeTargetDelta(self, meshIndex, blendShapeTargetIndex, deltaIndex):
        return _py3dna.GeometryReader_getBlendShapeTargetDelta(self, meshIndex, blendShapeTargetIndex, deltaIndex)

    def getBlendShapeTargetDeltaXs(self, meshIndex, blendShapeTargetIndex):
        return _py3dna.GeometryReader_getBlendShapeTargetDeltaXs(self, meshIndex, blendShapeTargetIndex)

    def getBlendShapeTargetDeltaYs(self, meshIndex, blendShapeTargetIndex):
        return _py3dna.GeometryReader_getBlendShapeTargetDeltaYs(self, meshIndex, blendShapeTargetIndex)

    def getBlendShapeTargetDeltaZs(self, meshIndex, blendShapeTargetIndex):
        return _py3dna.GeometryReader_getBlendShapeTargetDeltaZs(self, meshIndex, blendShapeTargetIndex)

    def getBlendShapeTargetVertexIndices(self, meshIndex, blendShapeTargetIndex):
        return _py3dna.GeometryReader_getBlendShapeTargetVertexIndices(self, meshIndex, blendShapeTargetIndex)

# Register GeometryReader in _py3dna:
_py3dna.GeometryReader_swigregister(GeometryReader)
class RBFBehaviorReader(BehaviorReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getRBFPoseCount(self):
        return _py3dna.RBFBehaviorReader_getRBFPoseCount(self)

    def getRBFPoseName(self, poseIndex):
        return _py3dna.RBFBehaviorReader_getRBFPoseName(self, poseIndex)

    def getRBFPoseJointOutputIndices(self, poseIndex):
        return _py3dna.RBFBehaviorReader_getRBFPoseJointOutputIndices(self, poseIndex)

    def getRBFPoseBlendShapeChannelOutputIndices(self, poseIndex):
        return _py3dna.RBFBehaviorReader_getRBFPoseBlendShapeChannelOutputIndices(self, poseIndex)

    def getRBFPoseAnimatedMapOutputIndices(self, poseIndex):
        return _py3dna.RBFBehaviorReader_getRBFPoseAnimatedMapOutputIndices(self, poseIndex)

    def getRBFPoseJointOutputValues(self, poseIndex):
        return _py3dna.RBFBehaviorReader_getRBFPoseJointOutputValues(self, poseIndex)

    def getRBFPoseScale(self, poseIndex):
        return _py3dna.RBFBehaviorReader_getRBFPoseScale(self, poseIndex)

    def getRBFPoseControlCount(self):
        return _py3dna.RBFBehaviorReader_getRBFPoseControlCount(self)

    def getRBFPoseControlName(self, poseControlIndex):
        return _py3dna.RBFBehaviorReader_getRBFPoseControlName(self, poseControlIndex)

    def getRBFPoseInputControlIndices(self, poseIndex):
        return _py3dna.RBFBehaviorReader_getRBFPoseInputControlIndices(self, poseIndex)

    def getRBFPoseOutputControlIndices(self, poseIndex):
        return _py3dna.RBFBehaviorReader_getRBFPoseOutputControlIndices(self, poseIndex)

    def getRBFPoseOutputControlWeights(self, poseIndex):
        return _py3dna.RBFBehaviorReader_getRBFPoseOutputControlWeights(self, poseIndex)

    def getRBFSolverCount(self):
        return _py3dna.RBFBehaviorReader_getRBFSolverCount(self)

    def getRBFSolverIndexListCount(self):
        return _py3dna.RBFBehaviorReader_getRBFSolverIndexListCount(self)

    def getRBFSolverIndicesForLOD(self, lod):
        return _py3dna.RBFBehaviorReader_getRBFSolverIndicesForLOD(self, lod)

    def getRBFSolverName(self, solverIndex):
        return _py3dna.RBFBehaviorReader_getRBFSolverName(self, solverIndex)

    def getRBFSolverRawControlIndices(self, solverIndex):
        return _py3dna.RBFBehaviorReader_getRBFSolverRawControlIndices(self, solverIndex)

    def getRBFSolverPoseIndices(self, solverIndex):
        return _py3dna.RBFBehaviorReader_getRBFSolverPoseIndices(self, solverIndex)

    def getRBFSolverRawControlValues(self, solverIndex):
        return _py3dna.RBFBehaviorReader_getRBFSolverRawControlValues(self, solverIndex)

    def getRBFSolverType(self, solverIndex):
        return _py3dna.RBFBehaviorReader_getRBFSolverType(self, solverIndex)

    def getRBFSolverRadius(self, solverIndex):
        return _py3dna.RBFBehaviorReader_getRBFSolverRadius(self, solverIndex)

    def getRBFSolverAutomaticRadius(self, solverIndex):
        return _py3dna.RBFBehaviorReader_getRBFSolverAutomaticRadius(self, solverIndex)

    def getRBFSolverWeightThreshold(self, solverIndex):
        return _py3dna.RBFBehaviorReader_getRBFSolverWeightThreshold(self, solverIndex)

    def getRBFSolverDistanceMethod(self, solverIndex):
        return _py3dna.RBFBehaviorReader_getRBFSolverDistanceMethod(self, solverIndex)

    def getRBFSolverNormalizeMethod(self, solverIndex):
        return _py3dna.RBFBehaviorReader_getRBFSolverNormalizeMethod(self, solverIndex)

    def getRBFSolverFunctionType(self, solverIndex):
        return _py3dna.RBFBehaviorReader_getRBFSolverFunctionType(self, solverIndex)

    def getRBFSolverTwistAxis(self, solverIndex):
        return _py3dna.RBFBehaviorReader_getRBFSolverTwistAxis(self, solverIndex)

# Register RBFBehaviorReader in _py3dna:
_py3dna.RBFBehaviorReader_swigregister(RBFBehaviorReader)
class MachineLearnedBehaviorReader(DefinitionReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getMLControlCount(self):
        return _py3dna.MachineLearnedBehaviorReader_getMLControlCount(self)

    def getMLControlName(self, index):
        return _py3dna.MachineLearnedBehaviorReader_getMLControlName(self, index)

    def getNeuralNetworkCount(self):
        return _py3dna.MachineLearnedBehaviorReader_getNeuralNetworkCount(self)

    def getNeuralNetworkIndexListCount(self):
        return _py3dna.MachineLearnedBehaviorReader_getNeuralNetworkIndexListCount(self)

    def getNeuralNetworkIndicesForLOD(self, lod):
        return _py3dna.MachineLearnedBehaviorReader_getNeuralNetworkIndicesForLOD(self, lod)

    def getMeshRegionCount(self, meshIndex):
        return _py3dna.MachineLearnedBehaviorReader_getMeshRegionCount(self, meshIndex)

    def getMeshRegionName(self, meshIndex, regionIndex):
        return _py3dna.MachineLearnedBehaviorReader_getMeshRegionName(self, meshIndex, regionIndex)

    def getNeuralNetworkIndicesForMeshRegion(self, meshIndex, regionIndex):
        return _py3dna.MachineLearnedBehaviorReader_getNeuralNetworkIndicesForMeshRegion(self, meshIndex, regionIndex)

    def getNeuralNetworkInputIndices(self, netIndex):
        return _py3dna.MachineLearnedBehaviorReader_getNeuralNetworkInputIndices(self, netIndex)

    def getNeuralNetworkOutputIndices(self, netIndex):
        return _py3dna.MachineLearnedBehaviorReader_getNeuralNetworkOutputIndices(self, netIndex)

    def getNeuralNetworkLayerCount(self, netIndex):
        return _py3dna.MachineLearnedBehaviorReader_getNeuralNetworkLayerCount(self, netIndex)

    def getNeuralNetworkLayerActivationFunction(self, netIndex, layerIndex):
        return _py3dna.MachineLearnedBehaviorReader_getNeuralNetworkLayerActivationFunction(self, netIndex, layerIndex)

    def getNeuralNetworkLayerActivationFunctionParameters(self, netIndex, layerIndex):
        return _py3dna.MachineLearnedBehaviorReader_getNeuralNetworkLayerActivationFunctionParameters(self, netIndex, layerIndex)

    def getNeuralNetworkLayerBiases(self, netIndex, layerIndex):
        return _py3dna.MachineLearnedBehaviorReader_getNeuralNetworkLayerBiases(self, netIndex, layerIndex)

    def getNeuralNetworkLayerWeights(self, netIndex, layerIndex):
        return _py3dna.MachineLearnedBehaviorReader_getNeuralNetworkLayerWeights(self, netIndex, layerIndex)

# Register MachineLearnedBehaviorReader in _py3dna:
_py3dna.MachineLearnedBehaviorReader_swigregister(MachineLearnedBehaviorReader)
class JointBehaviorMetadataReader(DefinitionReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getJointTranslationRepresentation(self, jointIndex):
        return _py3dna.JointBehaviorMetadataReader_getJointTranslationRepresentation(self, jointIndex)

    def getJointRotationRepresentation(self, jointIndex):
        return _py3dna.JointBehaviorMetadataReader_getJointRotationRepresentation(self, jointIndex)

    def getJointScaleRepresentation(self, jointIndex):
        return _py3dna.JointBehaviorMetadataReader_getJointScaleRepresentation(self, jointIndex)

# Register JointBehaviorMetadataReader in _py3dna:
_py3dna.JointBehaviorMetadataReader_swigregister(JointBehaviorMetadataReader)
class TwistSwingBehaviorReader(DefinitionReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getTwistCount(self):
        return _py3dna.TwistSwingBehaviorReader_getTwistCount(self)

    def getTwistSetupTwistAxis(self, twistIndex):
        return _py3dna.TwistSwingBehaviorReader_getTwistSetupTwistAxis(self, twistIndex)

    def getTwistInputControlIndices(self, twistIndex):
        return _py3dna.TwistSwingBehaviorReader_getTwistInputControlIndices(self, twistIndex)

    def getTwistOutputJointIndices(self, twistIndex):
        return _py3dna.TwistSwingBehaviorReader_getTwistOutputJointIndices(self, twistIndex)

    def getTwistBlendWeights(self, twistIndex):
        return _py3dna.TwistSwingBehaviorReader_getTwistBlendWeights(self, twistIndex)

    def getSwingCount(self):
        return _py3dna.TwistSwingBehaviorReader_getSwingCount(self)

    def getSwingSetupTwistAxis(self, swingIndex):
        return _py3dna.TwistSwingBehaviorReader_getSwingSetupTwistAxis(self, swingIndex)

    def getSwingInputControlIndices(self, swingIndex):
        return _py3dna.TwistSwingBehaviorReader_getSwingInputControlIndices(self, swingIndex)

    def getSwingOutputJointIndices(self, swingIndex):
        return _py3dna.TwistSwingBehaviorReader_getSwingOutputJointIndices(self, swingIndex)

    def getSwingBlendWeights(self, swingIndex):
        return _py3dna.TwistSwingBehaviorReader_getSwingBlendWeights(self, swingIndex)

# Register TwistSwingBehaviorReader in _py3dna:
_py3dna.TwistSwingBehaviorReader_swigregister(TwistSwingBehaviorReader)
class Reader(RBFBehaviorReader, GeometryReader, MachineLearnedBehaviorReader, JointBehaviorMetadataReader, TwistSwingBehaviorReader, BehaviorReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py3dna.delete_Reader

    def unload(self, layer):
        return _py3dna.Reader_unload(self, layer)

# Register Reader in _py3dna:
_py3dna.Reader_swigregister(Reader)
class HeaderReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getFileFormatGeneration(self):
        return _py3dna.HeaderReader_getFileFormatGeneration(self)

    def getFileFormatVersion(self):
        return _py3dna.HeaderReader_getFileFormatVersion(self)

# Register HeaderReader in _py3dna:
_py3dna.HeaderReader_swigregister(HeaderReader)
class HeaderWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setFileFormatGeneration(self, generation):
        return _py3dna.HeaderWriter_setFileFormatGeneration(self, generation)

    def setFileFormatVersion(self, version):
        return _py3dna.HeaderWriter_setFileFormatVersion(self, version)

# Register HeaderWriter in _py3dna:
_py3dna.HeaderWriter_swigregister(HeaderWriter)
RBFSolverType_Additive = _py3dna.RBFSolverType_Additive
RBFSolverType_Interpolative = _py3dna.RBFSolverType_Interpolative
RBFFunctionType_Gaussian = _py3dna.RBFFunctionType_Gaussian
RBFFunctionType_Exponential = _py3dna.RBFFunctionType_Exponential
RBFFunctionType_Linear = _py3dna.RBFFunctionType_Linear
RBFFunctionType_Cubic = _py3dna.RBFFunctionType_Cubic
RBFFunctionType_Quintic = _py3dna.RBFFunctionType_Quintic
RBFDistanceMethod_Euclidean = _py3dna.RBFDistanceMethod_Euclidean
RBFDistanceMethod_Quaternion = _py3dna.RBFDistanceMethod_Quaternion
RBFDistanceMethod_SwingAngle = _py3dna.RBFDistanceMethod_SwingAngle
RBFDistanceMethod_TwistAngle = _py3dna.RBFDistanceMethod_TwistAngle
RBFNormalizeMethod_OnlyNormalizeAboveOne = _py3dna.RBFNormalizeMethod_OnlyNormalizeAboveOne
RBFNormalizeMethod_AlwaysNormalize = _py3dna.RBFNormalizeMethod_AlwaysNormalize
AutomaticRadius_On = _py3dna.AutomaticRadius_On
AutomaticRadius_Off = _py3dna.AutomaticRadius_Off
class RBFBehaviorWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clearRBFPoses(self):
        return _py3dna.RBFBehaviorWriter_clearRBFPoses(self)

    def setRBFPoseName(self, poseIndex, name):
        return _py3dna.RBFBehaviorWriter_setRBFPoseName(self, poseIndex, name)

    def setRBFPoseScale(self, poseIndex, scale):
        return _py3dna.RBFBehaviorWriter_setRBFPoseScale(self, poseIndex, scale)

    def clearRBFPoseControlNames(self):
        return _py3dna.RBFBehaviorWriter_clearRBFPoseControlNames(self)

    def setRBFPoseControlName(self, poseControlIndex, name):
        return _py3dna.RBFBehaviorWriter_setRBFPoseControlName(self, poseControlIndex, name)

    def setRBFPoseInputControlIndices(self, poseIndex, controlIndices, controlIndexCount):
        return _py3dna.RBFBehaviorWriter_setRBFPoseInputControlIndices(self, poseIndex, controlIndices, controlIndexCount)

    def setRBFPoseOutputControlIndices(self, poseIndex, controlIndices, controlIndexCount):
        return _py3dna.RBFBehaviorWriter_setRBFPoseOutputControlIndices(self, poseIndex, controlIndices, controlIndexCount)

    def setRBFPoseOutputControlWeights(self, poseIndex, controlWeights, controlWeightCount):
        return _py3dna.RBFBehaviorWriter_setRBFPoseOutputControlWeights(self, poseIndex, controlWeights, controlWeightCount)

    def clearRBFSolvers(self):
        return _py3dna.RBFBehaviorWriter_clearRBFSolvers(self)

    def clearRBFSolverIndices(self):
        return _py3dna.RBFBehaviorWriter_clearRBFSolverIndices(self)

    def setRBFSolverIndices(self, index, solverIndices, count):
        return _py3dna.RBFBehaviorWriter_setRBFSolverIndices(self, index, solverIndices, count)

    def clearLODRBFSolverMappings(self):
        return _py3dna.RBFBehaviorWriter_clearLODRBFSolverMappings(self)

    def setLODRBFSolverMapping(self, lod, index):
        return _py3dna.RBFBehaviorWriter_setLODRBFSolverMapping(self, lod, index)

    def setRBFSolverName(self, solverIndex, name):
        return _py3dna.RBFBehaviorWriter_setRBFSolverName(self, solverIndex, name)

    def setRBFSolverRawControlIndices(self, solverIndex, rawControlIndices, count):
        return _py3dna.RBFBehaviorWriter_setRBFSolverRawControlIndices(self, solverIndex, rawControlIndices, count)

    def setRBFSolverPoseIndices(self, solverIndex, poseIndices, count):
        return _py3dna.RBFBehaviorWriter_setRBFSolverPoseIndices(self, solverIndex, poseIndices, count)

    def setRBFSolverRawControlValues(self, solverIndex, values, count):
        return _py3dna.RBFBehaviorWriter_setRBFSolverRawControlValues(self, solverIndex, values, count)

    def setRBFSolverType(self, solverIndex, type):
        return _py3dna.RBFBehaviorWriter_setRBFSolverType(self, solverIndex, type)

    def setRBFSolverRadius(self, solverIndex, radius):
        return _py3dna.RBFBehaviorWriter_setRBFSolverRadius(self, solverIndex, radius)

    def setRBFSolverAutomaticRadius(self, solverIndex, automaticRadius):
        return _py3dna.RBFBehaviorWriter_setRBFSolverAutomaticRadius(self, solverIndex, automaticRadius)

    def setRBFSolverWeightThreshold(self, solverIndex, weightThreshold):
        return _py3dna.RBFBehaviorWriter_setRBFSolverWeightThreshold(self, solverIndex, weightThreshold)

    def setRBFSolverDistanceMethod(self, solverIndex, distanceMethod):
        return _py3dna.RBFBehaviorWriter_setRBFSolverDistanceMethod(self, solverIndex, distanceMethod)

    def setRBFSolverNormalizeMethod(self, solverIndex, normalizeMethod):
        return _py3dna.RBFBehaviorWriter_setRBFSolverNormalizeMethod(self, solverIndex, normalizeMethod)

    def setRBFSolverFunctionType(self, solverIndex, functionType):
        return _py3dna.RBFBehaviorWriter_setRBFSolverFunctionType(self, solverIndex, functionType)

    def setRBFSolverTwistAxis(self, solverIndex, twistAxis):
        return _py3dna.RBFBehaviorWriter_setRBFSolverTwistAxis(self, solverIndex, twistAxis)

# Register RBFBehaviorWriter in _py3dna:
_py3dna.RBFBehaviorWriter_swigregister(RBFBehaviorWriter)
ActivationFunction_linear = _py3dna.ActivationFunction_linear
ActivationFunction_relu = _py3dna.ActivationFunction_relu
ActivationFunction_leakyrelu = _py3dna.ActivationFunction_leakyrelu
ActivationFunction_tanh = _py3dna.ActivationFunction_tanh
ActivationFunction_sigmoid = _py3dna.ActivationFunction_sigmoid
class MachineLearnedBehaviorWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clearMLControlNames(self):
        return _py3dna.MachineLearnedBehaviorWriter_clearMLControlNames(self)

    def setMLControlName(self, index, name):
        return _py3dna.MachineLearnedBehaviorWriter_setMLControlName(self, index, name)

    def clearNeuralNetworks(self):
        return _py3dna.MachineLearnedBehaviorWriter_clearNeuralNetworks(self)

    def clearNeuralNetworkIndices(self):
        return _py3dna.MachineLearnedBehaviorWriter_clearNeuralNetworkIndices(self)

    def setNeuralNetworkIndices(self, index, netIndices, count):
        return _py3dna.MachineLearnedBehaviorWriter_setNeuralNetworkIndices(self, index, netIndices, count)

    def clearLODNeuralNetworkMappings(self):
        return _py3dna.MachineLearnedBehaviorWriter_clearLODNeuralNetworkMappings(self)

    def setLODNeuralNetworkMapping(self, lod, index):
        return _py3dna.MachineLearnedBehaviorWriter_setLODNeuralNetworkMapping(self, lod, index)

    def clearMeshRegionNames(self, *args):
        return _py3dna.MachineLearnedBehaviorWriter_clearMeshRegionNames(self, *args)

    def setMeshRegionName(self, meshIndex, regionIndex, name):
        return _py3dna.MachineLearnedBehaviorWriter_setMeshRegionName(self, meshIndex, regionIndex, name)

    def clearNeuralNetworkIndicesPerMeshRegion(self):
        return _py3dna.MachineLearnedBehaviorWriter_clearNeuralNetworkIndicesPerMeshRegion(self)

    def setNeuralNetworkIndicesForMeshRegion(self, meshIndex, regionIndex, netIndices, count):
        return _py3dna.MachineLearnedBehaviorWriter_setNeuralNetworkIndicesForMeshRegion(self, meshIndex, regionIndex, netIndices, count)

    def deleteNeuralNetwork(self, netIndex):
        return _py3dna.MachineLearnedBehaviorWriter_deleteNeuralNetwork(self, netIndex)

    def setNeuralNetworkInputIndices(self, netIndex, inputIndices):
        return _py3dna.MachineLearnedBehaviorWriter_setNeuralNetworkInputIndices(self, netIndex, inputIndices)

    def setNeuralNetworkOutputIndices(self, netIndex, outputIndices):
        return _py3dna.MachineLearnedBehaviorWriter_setNeuralNetworkOutputIndices(self, netIndex, outputIndices)

    def clearNeuralNetworkLayers(self, netIndex):
        return _py3dna.MachineLearnedBehaviorWriter_clearNeuralNetworkLayers(self, netIndex)

    def setNeuralNetworkLayerActivationFunction(self, netIndex, layerIndex, function):
        return _py3dna.MachineLearnedBehaviorWriter_setNeuralNetworkLayerActivationFunction(self, netIndex, layerIndex, function)

    def setNeuralNetworkLayerActivationFunctionParameters(self, netIndex, layerIndex, activationFunctionParameters, count):
        return _py3dna.MachineLearnedBehaviorWriter_setNeuralNetworkLayerActivationFunctionParameters(self, netIndex, layerIndex, activationFunctionParameters, count)

    def setNeuralNetworkLayerBiases(self, netIndex, layerIndex, biases, count):
        return _py3dna.MachineLearnedBehaviorWriter_setNeuralNetworkLayerBiases(self, netIndex, layerIndex, biases, count)

    def setNeuralNetworkLayerWeights(self, netIndex, layerIndex, weights, count):
        return _py3dna.MachineLearnedBehaviorWriter_setNeuralNetworkLayerWeights(self, netIndex, layerIndex, weights, count)

# Register MachineLearnedBehaviorWriter in _py3dna:
_py3dna.MachineLearnedBehaviorWriter_swigregister(MachineLearnedBehaviorWriter)
TranslationRepresentation_Vector = _py3dna.TranslationRepresentation_Vector
RotationRepresentation_EulerAngles = _py3dna.RotationRepresentation_EulerAngles
RotationRepresentation_Quaternion = _py3dna.RotationRepresentation_Quaternion
ScaleRepresentation_Vector = _py3dna.ScaleRepresentation_Vector
class JointBehaviorMetadataWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clearJointRepresentations(self):
        return _py3dna.JointBehaviorMetadataWriter_clearJointRepresentations(self)

    def setJointTranslationRepresentation(self, jointIndex, representation):
        return _py3dna.JointBehaviorMetadataWriter_setJointTranslationRepresentation(self, jointIndex, representation)

    def setJointRotationRepresentation(self, jointIndex, representation):
        return _py3dna.JointBehaviorMetadataWriter_setJointRotationRepresentation(self, jointIndex, representation)

    def setJointScaleRepresentation(self, jointIndex, representation):
        return _py3dna.JointBehaviorMetadataWriter_setJointScaleRepresentation(self, jointIndex, representation)

# Register JointBehaviorMetadataWriter in _py3dna:
_py3dna.JointBehaviorMetadataWriter_swigregister(JointBehaviorMetadataWriter)
TwistAxis_X = _py3dna.TwistAxis_X
TwistAxis_Y = _py3dna.TwistAxis_Y
TwistAxis_Z = _py3dna.TwistAxis_Z
class TwistSwingBehaviorWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clearTwists(self):
        return _py3dna.TwistSwingBehaviorWriter_clearTwists(self)

    def deleteTwist(self, twistIndex):
        return _py3dna.TwistSwingBehaviorWriter_deleteTwist(self, twistIndex)

    def setTwistSetupTwistAxis(self, twistIndex, twistAxis):
        return _py3dna.TwistSwingBehaviorWriter_setTwistSetupTwistAxis(self, twistIndex, twistAxis)

    def setTwistInputControlIndices(self, twistIndex, controlIndices, controlIndexCount):
        return _py3dna.TwistSwingBehaviorWriter_setTwistInputControlIndices(self, twistIndex, controlIndices, controlIndexCount)

    def setTwistOutputJointIndices(self, twistIndex, jointIndices, jointIndexCount):
        return _py3dna.TwistSwingBehaviorWriter_setTwistOutputJointIndices(self, twistIndex, jointIndices, jointIndexCount)

    def setTwistBlendWeights(self, twistIndex, blendWeights, blendWeightCount):
        return _py3dna.TwistSwingBehaviorWriter_setTwistBlendWeights(self, twistIndex, blendWeights, blendWeightCount)

    def clearSwings(self):
        return _py3dna.TwistSwingBehaviorWriter_clearSwings(self)

    def deleteSwing(self, swingIndex):
        return _py3dna.TwistSwingBehaviorWriter_deleteSwing(self, swingIndex)

    def setSwingSetupTwistAxis(self, swingIndex, twistAxis):
        return _py3dna.TwistSwingBehaviorWriter_setSwingSetupTwistAxis(self, swingIndex, twistAxis)

    def setSwingInputControlIndices(self, swingIndex, controlIndices, controlIndexCount):
        return _py3dna.TwistSwingBehaviorWriter_setSwingInputControlIndices(self, swingIndex, controlIndices, controlIndexCount)

    def setSwingOutputJointIndices(self, swingIndex, jointIndices, jointIndexCount):
        return _py3dna.TwistSwingBehaviorWriter_setSwingOutputJointIndices(self, swingIndex, jointIndices, jointIndexCount)

    def setSwingBlendWeights(self, swingIndex, blendWeights, blendWeightCount):
        return _py3dna.TwistSwingBehaviorWriter_setSwingBlendWeights(self, swingIndex, blendWeights, blendWeightCount)

# Register TwistSwingBehaviorWriter in _py3dna:
_py3dna.TwistSwingBehaviorWriter_swigregister(TwistSwingBehaviorWriter)
class StreamReader(Reader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py3dna.delete_StreamReader

    def read(self):
        return _py3dna.StreamReader_read(self)

# Register StreamReader in _py3dna:
_py3dna.StreamReader_swigregister(StreamReader)
StreamReader.SignatureMismatchError = _py3dna.cvar.StreamReader_SignatureMismatchError
StreamReader.VersionMismatchError = _py3dna.cvar.StreamReader_VersionMismatchError
StreamReader.InvalidDataError = _py3dna.cvar.StreamReader_InvalidDataError

class BinaryStreamReader(StreamReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def create(*args):
        return _py3dna.BinaryStreamReader_create(*args)

    @staticmethod
    def destroy(instance):
        return _py3dna.BinaryStreamReader_destroy(instance)
    __swig_destroy__ = _py3dna.delete_BinaryStreamReader

# Register BinaryStreamReader in _py3dna:
_py3dna.BinaryStreamReader_swigregister(BinaryStreamReader)
class JSONStreamReader(StreamReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def create(stream, memRes=None):
        return _py3dna.JSONStreamReader_create(stream, memRes)

    @staticmethod
    def destroy(instance):
        return _py3dna.JSONStreamReader_destroy(instance)
    __swig_destroy__ = _py3dna.delete_JSONStreamReader

# Register JSONStreamReader in _py3dna:
_py3dna.JSONStreamReader_swigregister(JSONStreamReader)
class DescriptorWriter(HeaderWriter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setName(self, name):
        return _py3dna.DescriptorWriter_setName(self, name)

    def setArchetype(self, archetype):
        return _py3dna.DescriptorWriter_setArchetype(self, archetype)

    def setGender(self, gender):
        return _py3dna.DescriptorWriter_setGender(self, gender)

    def setAge(self, age):
        return _py3dna.DescriptorWriter_setAge(self, age)

    def clearMetaData(self):
        return _py3dna.DescriptorWriter_clearMetaData(self)

    def setMetaData(self, key, value):
        return _py3dna.DescriptorWriter_setMetaData(self, key, value)

    def setTranslationUnit(self, unit):
        return _py3dna.DescriptorWriter_setTranslationUnit(self, unit)

    def setRotationUnit(self, unit):
        return _py3dna.DescriptorWriter_setRotationUnit(self, unit)

    def setCoordinateSystem(self, system):
        return _py3dna.DescriptorWriter_setCoordinateSystem(self, system)

    def setLODCount(self, lodCount):
        return _py3dna.DescriptorWriter_setLODCount(self, lodCount)

    def setDBMaxLOD(self, lod):
        return _py3dna.DescriptorWriter_setDBMaxLOD(self, lod)

    def setDBComplexity(self, name):
        return _py3dna.DescriptorWriter_setDBComplexity(self, name)

    def setDBName(self, name):
        return _py3dna.DescriptorWriter_setDBName(self, name)

# Register DescriptorWriter in _py3dna:
_py3dna.DescriptorWriter_swigregister(DescriptorWriter)
class DefinitionWriter(DescriptorWriter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clearGUIControlNames(self):
        return _py3dna.DefinitionWriter_clearGUIControlNames(self)

    def setGUIControlName(self, index, name):
        return _py3dna.DefinitionWriter_setGUIControlName(self, index, name)

    def clearRawControlNames(self):
        return _py3dna.DefinitionWriter_clearRawControlNames(self)

    def setRawControlName(self, index, name):
        return _py3dna.DefinitionWriter_setRawControlName(self, index, name)

    def clearJointNames(self):
        return _py3dna.DefinitionWriter_clearJointNames(self)

    def setJointName(self, index, name):
        return _py3dna.DefinitionWriter_setJointName(self, index, name)

    def clearJointIndices(self):
        return _py3dna.DefinitionWriter_clearJointIndices(self)

    def setJointIndices(self, index, jointIndices):
        return _py3dna.DefinitionWriter_setJointIndices(self, index, jointIndices)

    def clearLODJointMappings(self):
        return _py3dna.DefinitionWriter_clearLODJointMappings(self)

    def setLODJointMapping(self, lod, index):
        return _py3dna.DefinitionWriter_setLODJointMapping(self, lod, index)

    def clearBlendShapeChannelNames(self):
        return _py3dna.DefinitionWriter_clearBlendShapeChannelNames(self)

    def setBlendShapeChannelName(self, index, name):
        return _py3dna.DefinitionWriter_setBlendShapeChannelName(self, index, name)

    def clearBlendShapeChannelIndices(self):
        return _py3dna.DefinitionWriter_clearBlendShapeChannelIndices(self)

    def setBlendShapeChannelIndices(self, index, blendShapeChannelIndices):
        return _py3dna.DefinitionWriter_setBlendShapeChannelIndices(self, index, blendShapeChannelIndices)

    def clearLODBlendShapeChannelMappings(self):
        return _py3dna.DefinitionWriter_clearLODBlendShapeChannelMappings(self)

    def setLODBlendShapeChannelMapping(self, lod, index):
        return _py3dna.DefinitionWriter_setLODBlendShapeChannelMapping(self, lod, index)

    def clearAnimatedMapNames(self):
        return _py3dna.DefinitionWriter_clearAnimatedMapNames(self)

    def setAnimatedMapName(self, index, name):
        return _py3dna.DefinitionWriter_setAnimatedMapName(self, index, name)

    def clearAnimatedMapIndices(self):
        return _py3dna.DefinitionWriter_clearAnimatedMapIndices(self)

    def setAnimatedMapIndices(self, index, animatedMapIndices):
        return _py3dna.DefinitionWriter_setAnimatedMapIndices(self, index, animatedMapIndices)

    def clearLODAnimatedMapMappings(self):
        return _py3dna.DefinitionWriter_clearLODAnimatedMapMappings(self)

    def setLODAnimatedMapMapping(self, lod, index):
        return _py3dna.DefinitionWriter_setLODAnimatedMapMapping(self, lod, index)

    def clearMeshNames(self):
        return _py3dna.DefinitionWriter_clearMeshNames(self)

    def setMeshName(self, index, name):
        return _py3dna.DefinitionWriter_setMeshName(self, index, name)

    def clearMeshIndices(self):
        return _py3dna.DefinitionWriter_clearMeshIndices(self)

    def setMeshIndices(self, index, meshIndices):
        return _py3dna.DefinitionWriter_setMeshIndices(self, index, meshIndices)

    def clearLODMeshMappings(self):
        return _py3dna.DefinitionWriter_clearLODMeshMappings(self)

    def setLODMeshMapping(self, lod, index):
        return _py3dna.DefinitionWriter_setLODMeshMapping(self, lod, index)

    def clearMeshBlendShapeChannelMappings(self):
        return _py3dna.DefinitionWriter_clearMeshBlendShapeChannelMappings(self)

    def setMeshBlendShapeChannelMapping(self, index, meshIndex, blendShapeChannelIndex):
        return _py3dna.DefinitionWriter_setMeshBlendShapeChannelMapping(self, index, meshIndex, blendShapeChannelIndex)

    def setJointHierarchy(self, jointIndices):
        return _py3dna.DefinitionWriter_setJointHierarchy(self, jointIndices)

    def setNeutralJointTranslations(self, translations):
        return _py3dna.DefinitionWriter_setNeutralJointTranslations(self, translations)

    def setNeutralJointRotations(self, rotations):
        return _py3dna.DefinitionWriter_setNeutralJointRotations(self, rotations)

# Register DefinitionWriter in _py3dna:
_py3dna.DefinitionWriter_swigregister(DefinitionWriter)
class BehaviorWriter(DefinitionWriter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setGUIToRawInputIndices(self, inputIndices):
        return _py3dna.BehaviorWriter_setGUIToRawInputIndices(self, inputIndices)

    def setGUIToRawOutputIndices(self, outputIndices):
        return _py3dna.BehaviorWriter_setGUIToRawOutputIndices(self, outputIndices)

    def setGUIToRawFromValues(self, fromValues):
        return _py3dna.BehaviorWriter_setGUIToRawFromValues(self, fromValues)

    def setGUIToRawToValues(self, toValues):
        return _py3dna.BehaviorWriter_setGUIToRawToValues(self, toValues)

    def setGUIToRawSlopeValues(self, slopeValues):
        return _py3dna.BehaviorWriter_setGUIToRawSlopeValues(self, slopeValues)

    def setGUIToRawCutValues(self, cutValues):
        return _py3dna.BehaviorWriter_setGUIToRawCutValues(self, cutValues)

    def setPSDCount(self, count):
        return _py3dna.BehaviorWriter_setPSDCount(self, count)

    def setPSDRowIndices(self, rowIndices):
        return _py3dna.BehaviorWriter_setPSDRowIndices(self, rowIndices)

    def setPSDColumnIndices(self, columnIndices):
        return _py3dna.BehaviorWriter_setPSDColumnIndices(self, columnIndices)

    def setPSDValues(self, weights):
        return _py3dna.BehaviorWriter_setPSDValues(self, weights)

    def setJointRowCount(self, rowCount):
        return _py3dna.BehaviorWriter_setJointRowCount(self, rowCount)

    def setJointColumnCount(self, columnCount):
        return _py3dna.BehaviorWriter_setJointColumnCount(self, columnCount)

    def clearJointGroups(self):
        return _py3dna.BehaviorWriter_clearJointGroups(self)

    def deleteJointGroup(self, jointGroupIndex):
        return _py3dna.BehaviorWriter_deleteJointGroup(self, jointGroupIndex)

    def setJointGroupLODs(self, jointGroupIndex, lods):
        return _py3dna.BehaviorWriter_setJointGroupLODs(self, jointGroupIndex, lods)

    def setJointGroupInputIndices(self, jointGroupIndex, inputIndices):
        return _py3dna.BehaviorWriter_setJointGroupInputIndices(self, jointGroupIndex, inputIndices)

    def setJointGroupOutputIndices(self, jointGroupIndex, outputIndices):
        return _py3dna.BehaviorWriter_setJointGroupOutputIndices(self, jointGroupIndex, outputIndices)

    def setJointGroupValues(self, jointGroupIndex, values):
        return _py3dna.BehaviorWriter_setJointGroupValues(self, jointGroupIndex, values)

    def setJointGroupJointIndices(self, jointGroupIndex, jointIndices):
        return _py3dna.BehaviorWriter_setJointGroupJointIndices(self, jointGroupIndex, jointIndices)

    def setBlendShapeChannelLODs(self, lods):
        return _py3dna.BehaviorWriter_setBlendShapeChannelLODs(self, lods)

    def setBlendShapeChannelInputIndices(self, inputIndices):
        return _py3dna.BehaviorWriter_setBlendShapeChannelInputIndices(self, inputIndices)

    def setBlendShapeChannelOutputIndices(self, outputIndices):
        return _py3dna.BehaviorWriter_setBlendShapeChannelOutputIndices(self, outputIndices)

    def setAnimatedMapLODs(self, lods):
        return _py3dna.BehaviorWriter_setAnimatedMapLODs(self, lods)

    def setAnimatedMapInputIndices(self, inputIndices):
        return _py3dna.BehaviorWriter_setAnimatedMapInputIndices(self, inputIndices)

    def setAnimatedMapOutputIndices(self, outputIndices):
        return _py3dna.BehaviorWriter_setAnimatedMapOutputIndices(self, outputIndices)

    def setAnimatedMapFromValues(self, fromValues):
        return _py3dna.BehaviorWriter_setAnimatedMapFromValues(self, fromValues)

    def setAnimatedMapToValues(self, toValues):
        return _py3dna.BehaviorWriter_setAnimatedMapToValues(self, toValues)

    def setAnimatedMapSlopeValues(self, slopeValues):
        return _py3dna.BehaviorWriter_setAnimatedMapSlopeValues(self, slopeValues)

    def setAnimatedMapCutValues(self, cutValues):
        return _py3dna.BehaviorWriter_setAnimatedMapCutValues(self, cutValues)

# Register BehaviorWriter in _py3dna:
_py3dna.BehaviorWriter_swigregister(BehaviorWriter)
class GeometryWriter(DefinitionWriter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clearMeshes(self):
        return _py3dna.GeometryWriter_clearMeshes(self)

    def deleteMesh(self, meshIndex):
        return _py3dna.GeometryWriter_deleteMesh(self, meshIndex)

    def setVertexPositions(self, meshIndex, positions):
        return _py3dna.GeometryWriter_setVertexPositions(self, meshIndex, positions)

    def setVertexTextureCoordinates(self, meshIndex, textureCoordinates):
        return _py3dna.GeometryWriter_setVertexTextureCoordinates(self, meshIndex, textureCoordinates)

    def setVertexNormals(self, meshIndex, normals):
        return _py3dna.GeometryWriter_setVertexNormals(self, meshIndex, normals)

    def setVertexLayouts(self, meshIndex, layouts):
        return _py3dna.GeometryWriter_setVertexLayouts(self, meshIndex, layouts)

    def clearFaceVertexLayoutIndices(self, meshIndex):
        return _py3dna.GeometryWriter_clearFaceVertexLayoutIndices(self, meshIndex)

    def setFaceVertexLayoutIndices(self, meshIndex, faceIndex, layoutIndices):
        return _py3dna.GeometryWriter_setFaceVertexLayoutIndices(self, meshIndex, faceIndex, layoutIndices)

    def setMaximumInfluencePerVertex(self, meshIndex, maxInfluenceCount):
        return _py3dna.GeometryWriter_setMaximumInfluencePerVertex(self, meshIndex, maxInfluenceCount)

    def clearSkinWeights(self, meshIndex):
        return _py3dna.GeometryWriter_clearSkinWeights(self, meshIndex)

    def setSkinWeightsValues(self, meshIndex, vertexIndex, weights):
        return _py3dna.GeometryWriter_setSkinWeightsValues(self, meshIndex, vertexIndex, weights)

    def setSkinWeightsJointIndices(self, meshIndex, vertexIndex, jointIndices):
        return _py3dna.GeometryWriter_setSkinWeightsJointIndices(self, meshIndex, vertexIndex, jointIndices)

    def clearBlendShapeTargets(self, meshIndex):
        return _py3dna.GeometryWriter_clearBlendShapeTargets(self, meshIndex)

    def setBlendShapeChannelIndex(self, meshIndex, blendShapeTargetIndex, blendShapeChannelIndex):
        return _py3dna.GeometryWriter_setBlendShapeChannelIndex(self, meshIndex, blendShapeTargetIndex, blendShapeChannelIndex)

    def setBlendShapeTargetDeltas(self, meshIndex, blendShapeTargetIndex, deltas):
        return _py3dna.GeometryWriter_setBlendShapeTargetDeltas(self, meshIndex, blendShapeTargetIndex, deltas)

    def setBlendShapeTargetVertexIndices(self, meshIndex, blendShapeTargetIndex, vertexIndices):
        return _py3dna.GeometryWriter_setBlendShapeTargetVertexIndices(self, meshIndex, blendShapeTargetIndex, vertexIndices)

# Register GeometryWriter in _py3dna:
_py3dna.GeometryWriter_swigregister(GeometryWriter)
class Writer(RBFBehaviorWriter, GeometryWriter, MachineLearnedBehaviorWriter, JointBehaviorMetadataWriter, TwistSwingBehaviorWriter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py3dna.delete_Writer

    def setFrom(self, *args):
        return _py3dna.Writer_setFrom(self, *args)

# Register Writer in _py3dna:
_py3dna.Writer_swigregister(Writer)
class StreamWriter(Writer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py3dna.delete_StreamWriter

    def write(self):
        return _py3dna.StreamWriter_write(self)

# Register StreamWriter in _py3dna:
_py3dna.StreamWriter_swigregister(StreamWriter)
class BinaryStreamWriter(StreamWriter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def create(stream, memRes=None):
        return _py3dna.BinaryStreamWriter_create(stream, memRes)

    @staticmethod
    def destroy(instance):
        return _py3dna.BinaryStreamWriter_destroy(instance)
    __swig_destroy__ = _py3dna.delete_BinaryStreamWriter

    def setFrom(self, *args):
        return _py3dna.BinaryStreamWriter_setFrom(self, *args)

# Register BinaryStreamWriter in _py3dna:
_py3dna.BinaryStreamWriter_swigregister(BinaryStreamWriter)
class JSONStreamWriter(StreamWriter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def create(stream, indentWidth=4, memRes=None):
        return _py3dna.JSONStreamWriter_create(stream, indentWidth, memRes)

    @staticmethod
    def destroy(instance):
        return _py3dna.JSONStreamWriter_destroy(instance)
    __swig_destroy__ = _py3dna.delete_JSONStreamWriter

    def setFrom(self, *args):
        return _py3dna.JSONStreamWriter_setFrom(self, *args)

# Register JSONStreamWriter in _py3dna:
_py3dna.JSONStreamWriter_swigregister(JSONStreamWriter)

JSONStreamReader.__new__ = __new_decorator(JSONStreamReader.create, JSONStreamReader.__new__)
JSONStreamReader.__del__ = lambda instance: JSONStreamReader.destroy(instance)
JSONStreamReader.__init__ = __managed_init
#del JSONStreamReader.create#注释掉删除create的语句
#del JSONStreamReader.destroy#注释掉删除destroy的语句


JSONStreamWriter.__new__ = __new_decorator(JSONStreamWriter.create, JSONStreamWriter.__new__)
JSONStreamWriter.__del__ = lambda instance: JSONStreamWriter.destroy(instance)
JSONStreamWriter.__init__ = __managed_init
#del JSONStreamWriter.create#注释掉删除create的语句
#del JSONStreamWriter.destroy#注释掉删除destroy的语句


FileStream.__new__ = __new_decorator(FileStream.create, FileStream.__new__)
FileStream.__del__ = lambda instance: FileStream.destroy(instance)
FileStream.__init__ = __managed_init
#del FileStream.create#注释掉删除create的语句
#del FileStream.destroy#注释掉删除destroy的语句


MemoryMappedFileStream.__new__ = __new_decorator(MemoryMappedFileStream.create, MemoryMappedFileStream.__new__)
MemoryMappedFileStream.__del__ = lambda instance: MemoryMappedFileStream.destroy(instance)
MemoryMappedFileStream.__init__ = __managed_init
#del MemoryMappedFileStream.create#注释掉删除create的语句
#del MemoryMappedFileStream.destroy#注释掉删除destroy的语句


BinaryStreamReader.__new__ = __new_decorator(BinaryStreamReader.create, BinaryStreamReader.__new__)
BinaryStreamReader.__del__ = lambda instance: BinaryStreamReader.destroy(instance)
BinaryStreamReader.__init__ = __managed_init
#del BinaryStreamReader.create#注释掉删除create的语句
#del BinaryStreamReader.destroy#注释掉删除destroy的语句


BinaryStreamWriter.__new__ = __new_decorator(BinaryStreamWriter.create, BinaryStreamWriter.__new__)
BinaryStreamWriter.__del__ = lambda instance: BinaryStreamWriter.destroy(instance)
BinaryStreamWriter.__init__ = __managed_init
#del BinaryStreamWriter.create#注释掉删除create的语句
#del BinaryStreamWriter.destroy#注释掉删除destroy的语句


